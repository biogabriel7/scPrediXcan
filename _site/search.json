[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "PCA_GTEx_scLiver_v4.html",
    "href": "PCA_GTEx_scLiver_v4.html",
    "title": "2023-04-17-PCA for bulk-sc-merged data",
    "section": "",
    "text": "1. Load and process the requied matrices and packages\n\n\nShow the code\nimport scanpy as sc\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport umap\nimport numpy as np\nimport sklearn\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport colorcet as cc\nimport datashader\n%matplotlib inline\n\n\n\n\nShow the code\n# set up some parameters for the plots\nsns.set(style = 'white', context = 'poster', rc = {'figure.figsize':(10,6)})\n\n\n\n\n1.1 Load the original GTEx CPM data and single cell data of liver in Tabular\nGTEx: https://gtexportal.org/home/datasets (raw counts matrix is converted to CPM) Tabular: https://tabula-sapiens-portal.ds.czbiohub.org/organs\n\n\nShow the code\n# load GTEx expression CPM matrix\nGTEx_CPM = pd.read_csv(\"../../Universal_dataframe/GTEx_expression/GTEx_proc_CPM.csv\", index_col= 0)\n\n# load the single cell liver expression data\nTissue_i = sc.read_h5ad(\"../../Tabula/unzip_dataset_1/TS_Liver.h5ad\") # here, the tissue_i is liver\n\n\n\n\n1.2 Plot the zero-proportion of the single cell data\n\n\nShow the code\nthe_tissue = \"liver\"\nTissue_i_X = pd.DataFrame(Tissue_i.layers[\"raw_counts\"].todense())\nTissue_i_X.columns = Tissue_i.var[\"gene_symbol\"]\n\n# filter by the protein_coding gene in GTEx\nGTEx_columns = GTEx_CPM.columns.to_list()\nGTEx_columns.remove(\"Tissue\")\nfilter0 = GTEx_columns\nfilter = list(set(Tissue_i_X.columns.to_list()).intersection(set(filter0)))\n\nTissue_i_X = Tissue_i_X[filter]\n\nTissue_i_X.index = Tissue_i.obs['donor'].index\nTissue_i_X[\"donor\"] = Tissue_i.obs[\"donor\"]\n\n# remove the duplicates of the data\nTissue_i_X = Tissue_i_X.loc[:,~Tissue_i_X.columns.duplicated()] #remove column duplicates\nTissue_i_X = Tissue_i_X.drop_duplicates() # remove row duplicates\n\n# get the zero proportion of genes in liver\nTissue_i_zero = Tissue_i_X == 0\n\n# record the zero-proportion of each gene\nZero_proportion = []\n\nfor i in range(len(Tissue_i_zero.iloc[1, :])):\n    proportion = Tissue_i_zero.iloc[:, i].sum()/len(Tissue_i_zero.iloc[:, 0])\n\n    Zero_proportion.append(proportion)\n\ndef plot_histogram(lst):\n    plt.hist(lst, bins=100)\n    plt.xlabel('Value ( number of cell with zero/ number of total cell)')\n    plt.ylabel('Frequency (number of genes)')\n    plt.title('Histogram of zero proportion of {} from Tabular'.format(the_tissue))\n    plt.show()\n\nplot_histogram(Zero_proportion)\n\n\n\n\n\nAs we can see, majority of the cells has a pretty large zero-proportion(&gt;0.9).\n\n\n1.3 Select gene lists with various zero-proportion thresholds and combine the GTEx data and pseudobulk data\nThe thresholds selected here are 0.99, 0.9, 0.8, 0.7.\n\n\nShow the code\n# select genes with different zero-proportions\nZero_p = pd.DataFrame()\nZero_p[\"gene\"] = Tissue_i_X.columns.to_list()\nZero_p[\"Zero_proportion\"] = Zero_proportion\nZero_p = Zero_p.iloc[:-1, :]\n\n\n\n\nShow the code\n# filter the original gene lists by certain number of zero-proportion as the threshold in GTEx data and single cell data\nprop = [0.99, 0.9, 0.8, 0.7]\nmerged_data = []\n\nfor p in prop:\n\n    GTEx_CPM_filtered = GTEx_CPM[[\"Tissue\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n    Tissue_i_X_filtered = Tissue_i_X[[\"donor\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n\n\n    # sum the cells by donors to make the pseudobulk\n    Tissue_i_f_pseudo = Tissue_i_X_filtered.groupby(\"donor\").sum()\n    Tissue_i_f_pseudo.reset_index(inplace=True)\n\n    # convert the counts to CPM for single cell data\n    # for each gene and sample\n    total_counts = Tissue_i_f_pseudo.iloc[:, 1:].sum(axis=1)\n    cpm_scaling_factor = 1e6 / total_counts.values\n\n    # create a copy of GTEx_counts_proc to store CPM values\n    Tissue_i_f_CPM = Tissue_i_f_pseudo.copy()\n    # normalize raw counts to CPM using numpy broadcasting\n    Tissue_i_f_CPM.iloc[:, 1:] = Tissue_i_f_pseudo.iloc[:, 1:].values * cpm_scaling_factor.reshape(-1, 1)\n\n    Tissue_i_f_CPM = Tissue_i_f_CPM.rename(columns = {\"donor\" : \"Tissue\"})\n    Tissue_i_f_CPM.Tissue = the_tissue\n\n    merged = pd.concat([GTEx_CPM_filtered, Tissue_i_f_CPM])\n    merged.reset_index(inplace=True, drop= True)\n\n    merged_data.append(merged)\n\n\n\n\nShow the code\n# save the results\nratio = [99, 90, 80, 70]\ni = 0\nfor matrix_i in merged_data:\n    matrix_i.to_csv(\"GTEx_liver_CPM_merge/merged_CPM_{}.csv\".format(ratio[i]))\n    i += 1\n\n\nThis is an example of merged data(CPM) with zero-proportion = 0.90.\n\n\nShow the code\nmerged_data[1]\n\n\n\n\n\n\n\n\n\nTissue\nPOLR2C\nLILRB5\nYLPM1\nING5\nGOT1\nLAMB1\nIPO7\nCOMMD1\nARHGAP17\n...\nLAPTM4A\nPDCD5\nUSP36\nMRPS30\nCYTH1\nCD37\nROCK2\nZNF672\nMAD2L2\nZMYND11\n\n\n\n\n0\nADPSBQ\n72.097167\n81.779825\n123.715283\n44.117466\n28.411557\n520.158784\n69.437845\n14.092132\n102.690731\n...\n402.262187\n64.005555\n136.443661\n27.252365\n85.484692\n15.319511\n138.557481\n35.434894\n41.980916\n116.464654\n\n\n1\nMSCLSK\n122.116655\n5.007360\n130.165134\n58.829922\n207.530151\n96.765259\n183.830397\n12.924756\n40.714291\n...\n101.169638\n80.799384\n109.873530\n27.632236\n61.005895\n2.805170\n124.004247\n34.920435\n35.497199\n92.124931\n\n\n2\nARTTBL\n92.923865\n8.536908\n102.165887\n63.787575\n18.660321\n250.441149\n124.805061\n9.242021\n84.538053\n...\n317.955752\n92.042474\n174.868109\n24.225680\n50.516334\n25.132254\n178.242580\n44.296227\n29.085925\n137.245275\n\n\n3\nARTCRN\n61.280913\n36.213375\n85.564429\n75.308564\n16.909464\n604.354403\n163.373390\n14.748104\n96.519558\n...\n321.301000\n75.986638\n90.798311\n22.122155\n52.593094\n13.730993\n142.628571\n27.906972\n19.282722\n130.232536\n\n\n4\nHRTAA\n52.494796\n16.168765\n80.015446\n58.968438\n245.875684\n758.275209\n151.624361\n18.807311\n67.374969\n...\n305.181611\n73.511123\n90.262823\n31.969361\n58.968438\n29.269454\n72.253211\n40.437254\n19.758415\n107.750861\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17379\nARTTBL\n75.353499\n5.935865\n87.811707\n51.556722\n16.599096\n146.050720\n250.674787\n17.469927\n126.394831\n...\n307.101051\n59.483057\n67.675972\n24.294394\n21.770763\n12.404892\n221.102093\n22.943719\n12.244944\n222.008468\n\n\n17380\nMSCLSK\n74.287329\n13.233528\n95.328248\n25.100763\n191.515310\n107.234520\n492.021802\n13.174973\n48.932825\n...\n110.494106\n54.144259\n51.489746\n49.459824\n56.193699\n2.322699\n109.928070\n75.985436\n19.537997\n131.632618\n\n\n17381\nADPSBQ\n56.746888\n125.804483\n94.409136\n47.133583\n21.437262\n568.908843\n146.815839\n15.434018\n110.390747\n...\n448.478886\n52.731204\n71.572468\n26.750945\n87.087611\n16.671173\n244.672785\n24.702541\n17.340453\n145.436716\n\n\n17382\nliver\n70.578011\n13.602497\n56.273918\n14.021358\n251.358231\n18.995327\n39.603268\n81.164711\n44.723839\n...\n265.840332\n41.708042\n312.553772\n72.305809\n157.784775\n193.387924\n122.987938\n15.466427\n57.499084\n82.358459\n\n\n17383\nliver\n26.274071\n14.855628\n38.974174\n32.332836\n132.011185\n68.918465\n72.064362\n36.236080\n19.166672\n...\n144.478256\n84.298409\n36.935169\n26.390585\n38.042057\n19.399702\n92.862236\n14.098282\n31.808521\n40.022808\n\n\n\n\n17384 rows × 6987 columns\n\n\n\n\n\n2. PCA analysis of the merged data\n\n2.1 Do the analysis for the matrix with zero-proportion = 0.99 first, and take a look at the result.\n\n\nShow the code\nmerged_i = pd.read_csv(\"GTEx_liver_CPM_merge/merged_CPM_99.csv\", index_col= 0)\n\n\n\n\nShow the code\nmerged_i = merged_data[0]\n\n# remove columns with all zeros\nall_zeros = (merged_i == 0).all()\nmerged_i0 = merged_i.drop(columns = merged_i.columns[all_zeros])\n\nprint(f\"Check: it's {merged_i0.shape == merged_i.shape} that no column in the matrix with all zeros\") # the output is True so there is no column with all zeros.\n\n\nCheck: it's True that no column in the matrix with all zeros\n\n\n\n\nShow the code\n# Run PCA and remove some top PCs\n\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n\n\n\nShow the code\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n# SVD method\nu, s, vh = np.linalg.svd(x_standard, full_matrices=True)\n\n\n# check the SVD result\nsmat = np.zeros((len(u), len(vh)))\nsmat[:len(s), :len(s)] = np.diag(s)\nold_matrix = np.dot(u, np.dot(smat, vh))\n\nprint(f\"Check SVD for top PCs removing: {np.allclose(x_standard, old_matrix)}\")\n\n\nCheck SVD for top PCs removing: True\n\n\nPlot the PCA explained variance ratio\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data)\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\n\n\n\nShow the code\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs:\n\n\nShow the code\n\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemove some PCs that are highly related to indicator vector with certain threshold and see the result of PCA again.\n(to be done)\n\n\n2.2 Same analysis for matrix with genes having lower zero-proportion (0.7)\n\n\nShow the code\nmerged_i = merged_data[3]\n\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n\nPlot the PCA explained variance ratio.\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data).\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs\n\n\nShow the code\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Work-in-progress-Charles",
    "section": "",
    "text": "WIP’s Repo link\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#this-is-a-quarto-website.",
    "href": "index.html#this-is-a-quarto-website.",
    "title": "quarto_web_test_v123",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites. See Section for more details on visualizing model diagnostics."
  },
  {
    "objectID": "PCA_GTEx_scLiver_v3.html",
    "href": "PCA_GTEx_scLiver_v3.html",
    "title": "2023-04-17-PCA for bulk-sc-merged data",
    "section": "",
    "text": "1. Load and process the requied matrices and packages\n\n\nShow the code\nimport scanpy as sc\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport umap\nimport numpy as np\nimport sklearn\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport colorcet as cc\nimport datashader\n%matplotlib inline\n\n\n\n\nShow the code\n# set up some parameters for the plots\nsns.set(style = 'white', context = 'poster', rc = {'figure.figsize':(10,6)})\n\n\n\n\n1.1 Load the original GTEx CPM data and single cell data of liver in Tabular\nGTEx: https://gtexportal.org/home/datasets (raw counts matrix is converted to CPM) Tabular: https://tabula-sapiens-portal.ds.czbiohub.org/organs\n\n\nShow the code\n# load GTEx expression CPM matrix\nGTEx_CPM = pd.read_csv(\"../../Universal_dataframe/GTEx_expression/GTEx_proc_CPM.csv\", index_col= 0)\n\n# load the single cell liver expression data\nTissue_i = sc.read_h5ad(\"../../Tabula/unzip_dataset_1/TS_Liver.h5ad\") # here, the tissue_i is liver\n\n\n\n\n1.2 Plot the zero-proportion of the single cell data\n\n\nShow the code\nthe_tissue = \"liver\"\nTissue_i_X = pd.DataFrame(Tissue_i.layers[\"raw_counts\"].todense())\nTissue_i_X.columns = Tissue_i.var[\"gene_symbol\"]\n\n# filter by the protein_coding gene in GTEx\nGTEx_columns = GTEx_CPM.columns.to_list()\nGTEx_columns.remove(\"Tissue\")\nfilter0 = GTEx_columns\nfilter = list(set(Tissue_i_X.columns.to_list()).intersection(set(filter0)))\n\nTissue_i_X = Tissue_i_X[filter]\n\nTissue_i_X.index = Tissue_i.obs['donor'].index\nTissue_i_X[\"donor\"] = Tissue_i.obs[\"donor\"]\n\n# remove the duplicates of the data\nTissue_i_X = Tissue_i_X.loc[:,~Tissue_i_X.columns.duplicated()] #remove column duplicates\nTissue_i_X = Tissue_i_X.drop_duplicates() # remove row duplicates\n\n# get the zero proportion of genes in liver\nTissue_i_zero = Tissue_i_X == 0\n\n# record the zero-proportion of each gene\nZero_proportion = []\n\nfor i in range(len(Tissue_i_zero.iloc[1, :])):\n    proportion = Tissue_i_zero.iloc[:, i].sum()/len(Tissue_i_zero.iloc[:, 0])\n\n    Zero_proportion.append(proportion)\n\ndef plot_histogram(lst):\n    plt.hist(lst, bins=100)\n    plt.xlabel('Value ( number of cell with zero/ number of total cell)')\n    plt.ylabel('Frequency (number of genes)')\n    plt.title('Histogram of zero proportion of {} from Tabular'.format(the_tissue))\n    plt.show()\n\nplot_histogram(Zero_proportion)\n\n\n\n\n\nAs we can see, majority of the cells has a pretty large zero-proportion(&gt;0.9).\n\n\n1.3 Select gene lists with various zero-proportion thresholds and combine the GTEx data and pseudobulk data\nThe thresholds selected here are 0.99, 0.9, 0.8, 0.7.\n\n\nShow the code\n# select genes with different zero-proportions\nZero_p = pd.DataFrame()\nZero_p[\"gene\"] = Tissue_i_X.columns.to_list()\nZero_p[\"Zero_proportion\"] = Zero_proportion\nZero_p = Zero_p.iloc[:-1, :]\n\n\n\n\nShow the code\n# filter the original gene lists by certain number of zero-proportion as the threshold in GTEx data and single cell data\nprop = [0.99, 0.9, 0.8, 0.7]\nmerged_data = []\n\nfor p in prop:\n\n    GTEx_CPM_filtered = GTEx_CPM[[\"Tissue\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n    Tissue_i_X_filtered = Tissue_i_X[[\"donor\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n\n\n    # sum the cells by donors to make the pseudobulk\n    Tissue_i_f_pseudo = Tissue_i_X_filtered.groupby(\"donor\").sum()\n    Tissue_i_f_pseudo.reset_index(inplace=True)\n\n    # convert the counts to CPM for single cell data\n    # for each gene and sample\n    total_counts = Tissue_i_f_pseudo.iloc[:, 1:].sum(axis=1)\n    cpm_scaling_factor = 1e6 / total_counts.values\n\n    # create a copy of GTEx_counts_proc to store CPM values\n    Tissue_i_f_CPM = Tissue_i_f_pseudo.copy()\n    # normalize raw counts to CPM using numpy broadcasting\n    Tissue_i_f_CPM.iloc[:, 1:] = Tissue_i_f_pseudo.iloc[:, 1:].values * cpm_scaling_factor.reshape(-1, 1)\n\n    Tissue_i_f_CPM = Tissue_i_f_CPM.rename(columns = {\"donor\" : \"Tissue\"})\n    Tissue_i_f_CPM.Tissue = the_tissue\n\n    merged = pd.concat([GTEx_CPM_filtered, Tissue_i_f_CPM])\n    merged.reset_index(inplace=True, drop= True)\n\n    merged_data.append(merged)\n\n\n\n\nShow the code\n# save the results\nratio = [99, 90, 80, 70]\ni = 0\nfor matrix_i in merged_data:\n    matrix_i.to_csv(\"GTEx_liver_CPM_merge/merged_CPM_{}.csv\".format(ratio[i]))\n    i += 1\n\n\nThis is an example of merged data(CPM) with zero-proportion = 0.90.\n\n\nShow the code\nmerged_data[1]\n\n\n\n\n\n\n\n\n\nTissue\nPOLR2C\nLILRB5\nYLPM1\nING5\nGOT1\nLAMB1\nIPO7\nCOMMD1\nARHGAP17\n...\nLAPTM4A\nPDCD5\nUSP36\nMRPS30\nCYTH1\nCD37\nROCK2\nZNF672\nMAD2L2\nZMYND11\n\n\n\n\n0\nADPSBQ\n72.097167\n81.779825\n123.715283\n44.117466\n28.411557\n520.158784\n69.437845\n14.092132\n102.690731\n...\n402.262187\n64.005555\n136.443661\n27.252365\n85.484692\n15.319511\n138.557481\n35.434894\n41.980916\n116.464654\n\n\n1\nMSCLSK\n122.116655\n5.007360\n130.165134\n58.829922\n207.530151\n96.765259\n183.830397\n12.924756\n40.714291\n...\n101.169638\n80.799384\n109.873530\n27.632236\n61.005895\n2.805170\n124.004247\n34.920435\n35.497199\n92.124931\n\n\n2\nARTTBL\n92.923865\n8.536908\n102.165887\n63.787575\n18.660321\n250.441149\n124.805061\n9.242021\n84.538053\n...\n317.955752\n92.042474\n174.868109\n24.225680\n50.516334\n25.132254\n178.242580\n44.296227\n29.085925\n137.245275\n\n\n3\nARTCRN\n61.280913\n36.213375\n85.564429\n75.308564\n16.909464\n604.354403\n163.373390\n14.748104\n96.519558\n...\n321.301000\n75.986638\n90.798311\n22.122155\n52.593094\n13.730993\n142.628571\n27.906972\n19.282722\n130.232536\n\n\n4\nHRTAA\n52.494796\n16.168765\n80.015446\n58.968438\n245.875684\n758.275209\n151.624361\n18.807311\n67.374969\n...\n305.181611\n73.511123\n90.262823\n31.969361\n58.968438\n29.269454\n72.253211\n40.437254\n19.758415\n107.750861\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17379\nARTTBL\n75.353499\n5.935865\n87.811707\n51.556722\n16.599096\n146.050720\n250.674787\n17.469927\n126.394831\n...\n307.101051\n59.483057\n67.675972\n24.294394\n21.770763\n12.404892\n221.102093\n22.943719\n12.244944\n222.008468\n\n\n17380\nMSCLSK\n74.287329\n13.233528\n95.328248\n25.100763\n191.515310\n107.234520\n492.021802\n13.174973\n48.932825\n...\n110.494106\n54.144259\n51.489746\n49.459824\n56.193699\n2.322699\n109.928070\n75.985436\n19.537997\n131.632618\n\n\n17381\nADPSBQ\n56.746888\n125.804483\n94.409136\n47.133583\n21.437262\n568.908843\n146.815839\n15.434018\n110.390747\n...\n448.478886\n52.731204\n71.572468\n26.750945\n87.087611\n16.671173\n244.672785\n24.702541\n17.340453\n145.436716\n\n\n17382\nliver\n70.578011\n13.602497\n56.273918\n14.021358\n251.358231\n18.995327\n39.603268\n81.164711\n44.723839\n...\n265.840332\n41.708042\n312.553772\n72.305809\n157.784775\n193.387924\n122.987938\n15.466427\n57.499084\n82.358459\n\n\n17383\nliver\n26.274071\n14.855628\n38.974174\n32.332836\n132.011185\n68.918465\n72.064362\n36.236080\n19.166672\n...\n144.478256\n84.298409\n36.935169\n26.390585\n38.042057\n19.399702\n92.862236\n14.098282\n31.808521\n40.022808\n\n\n\n\n17384 rows × 6987 columns\n\n\n\n\n\n2. PCA analysis of the merged data\n\n2.1 Do the analysis for the matrix with zero-proportion = 0.99 first, and take a look at the result.\n\n\nShow the code\nmerged_i = pd.read_csv(\"GTEx_liver_CPM_merge/merged_CPM_99.csv\", index_col= 0)\n\n\n\n\nShow the code\nmerged_i = merged_data[0]\n\n# remove columns with all zeros\nall_zeros = (merged_i == 0).all()\nmerged_i0 = merged_i.drop(columns = merged_i.columns[all_zeros])\n\nprint(f\"Check: it's {merged_i0.shape == merged_i.shape} that no column in the matrix with all zeros\") # the output is True so there is no column with all zeros.\n\n\nCheck: it's True that no column in the matrix with all zeros\n\n\n\n\nShow the code\n# Run PCA and remove some top PCs\n\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n\n\n\nShow the code\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n# SVD method\nu, s, vh = np.linalg.svd(x_standard, full_matrices=True)\n\n\n# check the SVD result\nsmat = np.zeros((len(u), len(vh)))\nsmat[:len(s), :len(s)] = np.diag(s)\nold_matrix = np.dot(u, np.dot(smat, vh))\n\nprint(f\"Check SVD for top PCs removing: {np.allclose(x_standard, old_matrix)}\")\n\n\nCheck SVD for top PCs removing: True\n\n\nPlot the PCA explained variance ratio\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data)\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\n\n\n\nShow the code\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs:\n\n\nShow the code\n\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemove some PCs that are highly related to indicator vector with certain threshold and see the result of PCA again.\n(to be done)\n\n\n2.2 Same analysis for matrix with genes having lower zero-proportion (0.7)\n\n\nShow the code\nmerged_i = merged_data[3]\n\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n\nPlot the PCA explained variance ratio.\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data).\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs\n\n\nShow the code\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "post/PCA_GTEx_scLiver_v2.html",
    "href": "post/PCA_GTEx_scLiver_v2.html",
    "title": "2023-04-17-PCA for bulk-sc-merged data",
    "section": "",
    "text": "1. Load and process the requied matrices and packages\n\n\nShow the code\nimport scanpy as sc\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport umap\nimport numpy as np\nimport sklearn\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport colorcet as cc\nimport datashader\n%matplotlib inline\n\n\n\n\nShow the code\n# set up some parameters for the plots\nsns.set(style = 'white', context = 'poster', rc = {'figure.figsize':(10,6)})\n\n\n\n\n1.1 Load the original GTEx CPM data and single cell data of liver in Tabular\nGTEx: https://gtexportal.org/home/datasets (raw counts matrix is converted to CPM) Tabular: https://tabula-sapiens-portal.ds.czbiohub.org/organs\n\n\nShow the code\n# load GTEx expression CPM matrix\nGTEx_CPM = pd.read_csv(\"../../Universal_dataframe/GTEx_expression/GTEx_proc_CPM.csv\", index_col= 0)\n\n# load the single cell liver expression data\nTissue_i = sc.read_h5ad(\"../../Tabula/unzip_dataset_1/TS_Liver.h5ad\") # here, the tissue_i is liver\n\n\n\n\n1.2 Plot the zero-proportion of the single cell data\n\n\nShow the code\nthe_tissue = \"liver\"\nTissue_i_X = pd.DataFrame(Tissue_i.layers[\"raw_counts\"].todense())\nTissue_i_X.columns = Tissue_i.var[\"gene_symbol\"]\n\n# filter by the protein_coding gene in GTEx\nGTEx_columns = GTEx_CPM.columns.to_list()\nGTEx_columns.remove(\"Tissue\")\nfilter0 = GTEx_columns\nfilter = list(set(Tissue_i_X.columns.to_list()).intersection(set(filter0)))\n\nTissue_i_X = Tissue_i_X[filter]\n\nTissue_i_X.index = Tissue_i.obs['donor'].index\nTissue_i_X[\"donor\"] = Tissue_i.obs[\"donor\"]\n\n# remove the duplicates of the data\nTissue_i_X = Tissue_i_X.loc[:,~Tissue_i_X.columns.duplicated()] #remove column duplicates\nTissue_i_X = Tissue_i_X.drop_duplicates() # remove row duplicates\n\n# get the zero proportion of genes in liver\nTissue_i_zero = Tissue_i_X == 0\n\n# record the zero-proportion of each gene\nZero_proportion = []\n\nfor i in range(len(Tissue_i_zero.iloc[1, :])):\n    proportion = Tissue_i_zero.iloc[:, i].sum()/len(Tissue_i_zero.iloc[:, 0])\n\n    Zero_proportion.append(proportion)\n\ndef plot_histogram(lst):\n    plt.hist(lst, bins=100)\n    plt.xlabel('Value ( number of cell with zero/ number of total cell)')\n    plt.ylabel('Frequency (number of genes)')\n    plt.title('Histogram of zero proportion of {} from Tabular'.format(the_tissue))\n    plt.show()\n\nplot_histogram(Zero_proportion)\n\n\n\n\n\nAs we can see, majority of the cells has a pretty large zero-proportion(&gt;0.9).\n\n\n1.3 Select gene lists with various zero-proportion thresholds and combine the GTEx data and pseudobulk data\nThe thresholds selected here are 0.99, 0.9, 0.8, 0.7.\n\n\nShow the code\n# select genes with different zero-proportions\nZero_p = pd.DataFrame()\nZero_p[\"gene\"] = Tissue_i_X.columns.to_list()\nZero_p[\"Zero_proportion\"] = Zero_proportion\nZero_p = Zero_p.iloc[:-1, :]\n\n\n\n\nShow the code\n# filter the original gene lists by certain number of zero-proportion as the threshold in GTEx data and single cell data\nprop = [0.99, 0.9, 0.8, 0.7]\nmerged_data = []\n\nfor p in prop:\n\n    GTEx_CPM_filtered = GTEx_CPM[[\"Tissue\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n    Tissue_i_X_filtered = Tissue_i_X[[\"donor\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n\n\n    # sum the cells by donors to make the pseudobulk\n    Tissue_i_f_pseudo = Tissue_i_X_filtered.groupby(\"donor\").sum()\n    Tissue_i_f_pseudo.reset_index(inplace=True)\n\n    # convert the counts to CPM for single cell data\n    # for each gene and sample\n    total_counts = Tissue_i_f_pseudo.iloc[:, 1:].sum(axis=1)\n    cpm_scaling_factor = 1e6 / total_counts.values\n\n    # create a copy of GTEx_counts_proc to store CPM values\n    Tissue_i_f_CPM = Tissue_i_f_pseudo.copy()\n    # normalize raw counts to CPM using numpy broadcasting\n    Tissue_i_f_CPM.iloc[:, 1:] = Tissue_i_f_pseudo.iloc[:, 1:].values * cpm_scaling_factor.reshape(-1, 1)\n\n    Tissue_i_f_CPM = Tissue_i_f_CPM.rename(columns = {\"donor\" : \"Tissue\"})\n    Tissue_i_f_CPM.Tissue = the_tissue\n\n    merged = pd.concat([GTEx_CPM_filtered, Tissue_i_f_CPM])\n    merged.reset_index(inplace=True, drop= True)\n\n    merged_data.append(merged)\n\n\n\n\nShow the code\n# save the results\nratio = [99, 90, 80, 70]\ni = 0\nfor matrix_i in merged_data:\n    matrix_i.to_csv(\"GTEx_liver_CPM_merge/merged_CPM_{}.csv\".format(ratio[i]))\n    i += 1\n\n\nThis is an example of merged data(CPM) with zero-proportion = 0.90.\n\n\nShow the code\nmerged_data[1]\n\n\n\n\n\n\n\n\n\nTissue\nPOLR2C\nLILRB5\nYLPM1\nING5\nGOT1\nLAMB1\nIPO7\nCOMMD1\nARHGAP17\n...\nLAPTM4A\nPDCD5\nUSP36\nMRPS30\nCYTH1\nCD37\nROCK2\nZNF672\nMAD2L2\nZMYND11\n\n\n\n\n0\nADPSBQ\n72.097167\n81.779825\n123.715283\n44.117466\n28.411557\n520.158784\n69.437845\n14.092132\n102.690731\n...\n402.262187\n64.005555\n136.443661\n27.252365\n85.484692\n15.319511\n138.557481\n35.434894\n41.980916\n116.464654\n\n\n1\nMSCLSK\n122.116655\n5.007360\n130.165134\n58.829922\n207.530151\n96.765259\n183.830397\n12.924756\n40.714291\n...\n101.169638\n80.799384\n109.873530\n27.632236\n61.005895\n2.805170\n124.004247\n34.920435\n35.497199\n92.124931\n\n\n2\nARTTBL\n92.923865\n8.536908\n102.165887\n63.787575\n18.660321\n250.441149\n124.805061\n9.242021\n84.538053\n...\n317.955752\n92.042474\n174.868109\n24.225680\n50.516334\n25.132254\n178.242580\n44.296227\n29.085925\n137.245275\n\n\n3\nARTCRN\n61.280913\n36.213375\n85.564429\n75.308564\n16.909464\n604.354403\n163.373390\n14.748104\n96.519558\n...\n321.301000\n75.986638\n90.798311\n22.122155\n52.593094\n13.730993\n142.628571\n27.906972\n19.282722\n130.232536\n\n\n4\nHRTAA\n52.494796\n16.168765\n80.015446\n58.968438\n245.875684\n758.275209\n151.624361\n18.807311\n67.374969\n...\n305.181611\n73.511123\n90.262823\n31.969361\n58.968438\n29.269454\n72.253211\n40.437254\n19.758415\n107.750861\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17379\nARTTBL\n75.353499\n5.935865\n87.811707\n51.556722\n16.599096\n146.050720\n250.674787\n17.469927\n126.394831\n...\n307.101051\n59.483057\n67.675972\n24.294394\n21.770763\n12.404892\n221.102093\n22.943719\n12.244944\n222.008468\n\n\n17380\nMSCLSK\n74.287329\n13.233528\n95.328248\n25.100763\n191.515310\n107.234520\n492.021802\n13.174973\n48.932825\n...\n110.494106\n54.144259\n51.489746\n49.459824\n56.193699\n2.322699\n109.928070\n75.985436\n19.537997\n131.632618\n\n\n17381\nADPSBQ\n56.746888\n125.804483\n94.409136\n47.133583\n21.437262\n568.908843\n146.815839\n15.434018\n110.390747\n...\n448.478886\n52.731204\n71.572468\n26.750945\n87.087611\n16.671173\n244.672785\n24.702541\n17.340453\n145.436716\n\n\n17382\nliver\n70.578011\n13.602497\n56.273918\n14.021358\n251.358231\n18.995327\n39.603268\n81.164711\n44.723839\n...\n265.840332\n41.708042\n312.553772\n72.305809\n157.784775\n193.387924\n122.987938\n15.466427\n57.499084\n82.358459\n\n\n17383\nliver\n26.274071\n14.855628\n38.974174\n32.332836\n132.011185\n68.918465\n72.064362\n36.236080\n19.166672\n...\n144.478256\n84.298409\n36.935169\n26.390585\n38.042057\n19.399702\n92.862236\n14.098282\n31.808521\n40.022808\n\n\n\n\n17384 rows × 6987 columns\n\n\n\n\n\n2. PCA analysis of the merged data\n\n2.1 Do the analysis for the matrix with zero-proportion = 0.99 first, and take a look at the result.\n\n\nShow the code\nmerged_i = pd.read_csv(\"GTEx_liver_CPM_merge/merged_CPM_99.csv\", index_col= 0)\n\n\n\n\nShow the code\nmerged_i = merged_data[0]\n\n# remove columns with all zeros\nall_zeros = (merged_i == 0).all()\nmerged_i0 = merged_i.drop(columns = merged_i.columns[all_zeros])\n\nprint(f\"Check: it's {merged_i0.shape == merged_i.shape} that no column in the matrix with all zeros\") # the output is True so there is no column with all zeros.\n\n\nCheck: it's True that no column in the matrix with all zeros\n\n\n\n\nShow the code\n# Run PCA and remove some top PCs\n\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n\n\n\nShow the code\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n# SVD method\nu, s, vh = np.linalg.svd(x_standard, full_matrices=True)\n\n\n# check the SVD result\nsmat = np.zeros((len(u), len(vh)))\nsmat[:len(s), :len(s)] = np.diag(s)\nold_matrix = np.dot(u, np.dot(smat, vh))\n\nprint(f\"Check SVD for top PCs removing: {np.allclose(x_standard, old_matrix)}\")\n\n\nCheck SVD for top PCs removing: True\n\n\nPlot the PCA explained variance ratio\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data)\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\n\n\n\nShow the code\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs:\n\n\nShow the code\n\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemove some PCs that are highly related to indicator vector with certain threshold and see the result of PCA again.\n(to be done)\n\n\n2.2 Same analysis for matrix with genes having lower zero-proportion (0.7)\n\n\nShow the code\nmerged_i = merged_data[3]\n\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n\nPlot the PCA explained variance ratio.\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data).\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs\n\n\nShow the code\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "PCA_GTEx_scLiver_v2.html",
    "href": "PCA_GTEx_scLiver_v2.html",
    "title": "2023-04-17-PCA for bulk-sc-merged data",
    "section": "",
    "text": "1. Load and process the requied matrices and packages\n\n\nShow the code\nimport scanpy as sc\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport umap\nimport numpy as np\nimport sklearn\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport colorcet as cc\nimport datashader\n%matplotlib inline\n\n\n\n\nShow the code\n# set up some parameters for the plots\nsns.set(style = 'white', context = 'poster', rc = {'figure.figsize':(10,6)})\n\n\n\n\n1.1 Load the original GTEx CPM data and single cell data of liver in Tabular\nGTEx: https://gtexportal.org/home/datasets (raw counts matrix is converted to CPM) Tabular: https://tabula-sapiens-portal.ds.czbiohub.org/organs\n\n\nShow the code\n# load GTEx expression CPM matrix\nGTEx_CPM = pd.read_csv(\"../../Universal_dataframe/GTEx_expression/GTEx_proc_CPM.csv\", index_col= 0)\n\n# load the single cell liver expression data\nTissue_i = sc.read_h5ad(\"../../Tabula/unzip_dataset_1/TS_Liver.h5ad\") # here, the tissue_i is liver\n\n\n\n\n1.2 Plot the zero-proportion of the single cell data\n\n\nShow the code\nthe_tissue = \"liver\"\nTissue_i_X = pd.DataFrame(Tissue_i.layers[\"raw_counts\"].todense())\nTissue_i_X.columns = Tissue_i.var[\"gene_symbol\"]\n\n# filter by the protein_coding gene in GTEx\nGTEx_columns = GTEx_CPM.columns.to_list()\nGTEx_columns.remove(\"Tissue\")\nfilter0 = GTEx_columns\nfilter = list(set(Tissue_i_X.columns.to_list()).intersection(set(filter0)))\n\nTissue_i_X = Tissue_i_X[filter]\n\nTissue_i_X.index = Tissue_i.obs['donor'].index\nTissue_i_X[\"donor\"] = Tissue_i.obs[\"donor\"]\n\n# remove the duplicates of the data\nTissue_i_X = Tissue_i_X.loc[:,~Tissue_i_X.columns.duplicated()] #remove column duplicates\nTissue_i_X = Tissue_i_X.drop_duplicates() # remove row duplicates\n\n# get the zero proportion of genes in liver\nTissue_i_zero = Tissue_i_X == 0\n\n# record the zero-proportion of each gene\nZero_proportion = []\n\nfor i in range(len(Tissue_i_zero.iloc[1, :])):\n    proportion = Tissue_i_zero.iloc[:, i].sum()/len(Tissue_i_zero.iloc[:, 0])\n\n    Zero_proportion.append(proportion)\n\ndef plot_histogram(lst):\n    plt.hist(lst, bins=100)\n    plt.xlabel('Value ( number of cell with zero/ number of total cell)')\n    plt.ylabel('Frequency (number of genes)')\n    plt.title('Histogram of zero proportion of {} from Tabular'.format(the_tissue))\n    plt.show()\n\nplot_histogram(Zero_proportion)\n\n\n\n\n\nAs we can see, majority of the cells has a pretty large zero-proportion(&gt;0.9).\n\n\n1.3 Select gene lists with various zero-proportion thresholds and combine the GTEx data and pseudobulk data\nThe thresholds selected here are 0.99, 0.9, 0.8, 0.7.\n\n\nShow the code\n# select genes with different zero-proportions\nZero_p = pd.DataFrame()\nZero_p[\"gene\"] = Tissue_i_X.columns.to_list()\nZero_p[\"Zero_proportion\"] = Zero_proportion\nZero_p = Zero_p.iloc[:-1, :]\n\n\n\n\nShow the code\n# filter the original gene lists by certain number of zero-proportion as the threshold in GTEx data and single cell data\nprop = [0.99, 0.9, 0.8, 0.7]\nmerged_data = []\n\nfor p in prop:\n\n    GTEx_CPM_filtered = GTEx_CPM[[\"Tissue\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n    Tissue_i_X_filtered = Tissue_i_X[[\"donor\"] + Zero_p.gene[Zero_p[\"Zero_proportion\"] &lt;= p].to_list()]\n\n\n    # sum the cells by donors to make the pseudobulk\n    Tissue_i_f_pseudo = Tissue_i_X_filtered.groupby(\"donor\").sum()\n    Tissue_i_f_pseudo.reset_index(inplace=True)\n\n    # convert the counts to CPM for single cell data\n    # for each gene and sample\n    total_counts = Tissue_i_f_pseudo.iloc[:, 1:].sum(axis=1)\n    cpm_scaling_factor = 1e6 / total_counts.values\n\n    # create a copy of GTEx_counts_proc to store CPM values\n    Tissue_i_f_CPM = Tissue_i_f_pseudo.copy()\n    # normalize raw counts to CPM using numpy broadcasting\n    Tissue_i_f_CPM.iloc[:, 1:] = Tissue_i_f_pseudo.iloc[:, 1:].values * cpm_scaling_factor.reshape(-1, 1)\n\n    Tissue_i_f_CPM = Tissue_i_f_CPM.rename(columns = {\"donor\" : \"Tissue\"})\n    Tissue_i_f_CPM.Tissue = the_tissue\n\n    merged = pd.concat([GTEx_CPM_filtered, Tissue_i_f_CPM])\n    merged.reset_index(inplace=True, drop= True)\n\n    merged_data.append(merged)\n\n\n\n\nShow the code\n# save the results\nratio = [99, 90, 80, 70]\ni = 0\nfor matrix_i in merged_data:\n    matrix_i.to_csv(\"GTEx_liver_CPM_merge/merged_CPM_{}.csv\".format(ratio[i]))\n    i += 1\n\n\nThis is an example of merged data(CPM) with zero-proportion = 0.90.\n\n\nShow the code\nmerged_data[1]\n\n\n\n\n\n\n\n\n\nTissue\nPOLR2C\nLILRB5\nYLPM1\nING5\nGOT1\nLAMB1\nIPO7\nCOMMD1\nARHGAP17\n...\nLAPTM4A\nPDCD5\nUSP36\nMRPS30\nCYTH1\nCD37\nROCK2\nZNF672\nMAD2L2\nZMYND11\n\n\n\n\n0\nADPSBQ\n72.097167\n81.779825\n123.715283\n44.117466\n28.411557\n520.158784\n69.437845\n14.092132\n102.690731\n...\n402.262187\n64.005555\n136.443661\n27.252365\n85.484692\n15.319511\n138.557481\n35.434894\n41.980916\n116.464654\n\n\n1\nMSCLSK\n122.116655\n5.007360\n130.165134\n58.829922\n207.530151\n96.765259\n183.830397\n12.924756\n40.714291\n...\n101.169638\n80.799384\n109.873530\n27.632236\n61.005895\n2.805170\n124.004247\n34.920435\n35.497199\n92.124931\n\n\n2\nARTTBL\n92.923865\n8.536908\n102.165887\n63.787575\n18.660321\n250.441149\n124.805061\n9.242021\n84.538053\n...\n317.955752\n92.042474\n174.868109\n24.225680\n50.516334\n25.132254\n178.242580\n44.296227\n29.085925\n137.245275\n\n\n3\nARTCRN\n61.280913\n36.213375\n85.564429\n75.308564\n16.909464\n604.354403\n163.373390\n14.748104\n96.519558\n...\n321.301000\n75.986638\n90.798311\n22.122155\n52.593094\n13.730993\n142.628571\n27.906972\n19.282722\n130.232536\n\n\n4\nHRTAA\n52.494796\n16.168765\n80.015446\n58.968438\n245.875684\n758.275209\n151.624361\n18.807311\n67.374969\n...\n305.181611\n73.511123\n90.262823\n31.969361\n58.968438\n29.269454\n72.253211\n40.437254\n19.758415\n107.750861\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17379\nARTTBL\n75.353499\n5.935865\n87.811707\n51.556722\n16.599096\n146.050720\n250.674787\n17.469927\n126.394831\n...\n307.101051\n59.483057\n67.675972\n24.294394\n21.770763\n12.404892\n221.102093\n22.943719\n12.244944\n222.008468\n\n\n17380\nMSCLSK\n74.287329\n13.233528\n95.328248\n25.100763\n191.515310\n107.234520\n492.021802\n13.174973\n48.932825\n...\n110.494106\n54.144259\n51.489746\n49.459824\n56.193699\n2.322699\n109.928070\n75.985436\n19.537997\n131.632618\n\n\n17381\nADPSBQ\n56.746888\n125.804483\n94.409136\n47.133583\n21.437262\n568.908843\n146.815839\n15.434018\n110.390747\n...\n448.478886\n52.731204\n71.572468\n26.750945\n87.087611\n16.671173\n244.672785\n24.702541\n17.340453\n145.436716\n\n\n17382\nliver\n70.578011\n13.602497\n56.273918\n14.021358\n251.358231\n18.995327\n39.603268\n81.164711\n44.723839\n...\n265.840332\n41.708042\n312.553772\n72.305809\n157.784775\n193.387924\n122.987938\n15.466427\n57.499084\n82.358459\n\n\n17383\nliver\n26.274071\n14.855628\n38.974174\n32.332836\n132.011185\n68.918465\n72.064362\n36.236080\n19.166672\n...\n144.478256\n84.298409\n36.935169\n26.390585\n38.042057\n19.399702\n92.862236\n14.098282\n31.808521\n40.022808\n\n\n\n\n17384 rows × 6987 columns\n\n\n\n\n\n2. PCA analysis of the merged data\n\n2.1 Do the analysis for the matrix with zero-proportion = 0.99 first, and take a look at the result.\n\n\nShow the code\nmerged_i = pd.read_csv(\"GTEx_liver_CPM_merge/merged_CPM_99.csv\", index_col= 0)\n\n\n\n\nShow the code\nmerged_i = merged_data[0]\n\n# remove columns with all zeros\nall_zeros = (merged_i == 0).all()\nmerged_i0 = merged_i.drop(columns = merged_i.columns[all_zeros])\n\nprint(f\"Check: it's {merged_i0.shape == merged_i.shape} that no column in the matrix with all zeros\") # the output is True so there is no column with all zeros.\n\n\nCheck: it's True that no column in the matrix with all zeros\n\n\n\n\nShow the code\n# Run PCA and remove some top PCs\n\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n\n\n\nShow the code\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n# SVD method\nu, s, vh = np.linalg.svd(x_standard, full_matrices=True)\n\n\n# check the SVD result\nsmat = np.zeros((len(u), len(vh)))\nsmat[:len(s), :len(s)] = np.diag(s)\nold_matrix = np.dot(u, np.dot(smat, vh))\n\nprint(f\"Check SVD for top PCs removing: {np.allclose(x_standard, old_matrix)}\")\n\n\nCheck SVD for top PCs removing: True\n\n\nPlot the PCA explained variance ratio\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data)\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\n\n\n\nShow the code\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs:\n\n\nShow the code\n\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemove some PCs that are highly related to indicator vector with certain threshold and see the result of PCA again.\n(to be done)\n\n\n2.2 Same analysis for matrix with genes having lower zero-proportion (0.7)\n\n\nShow the code\nmerged_i = merged_data[3]\n\n# Standardizing the features\nx = merged_i.copy().iloc[:, 1:]\nx_standard = StandardScaler().fit_transform(x)\n\n\nPlot the PCA explained variance ratio.\n\n\nShow the code\n# PCA\npca = PCA()\nppc = pca.fit_transform(x_standard)\n\nplt.plot(np.arange(1,21,1), pca.explained_variance_ratio_[0:20], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('ratio of the variance')\nplt.title('PCA explained variance ratio')\n\n\nText(0.5, 1.0, 'PCA explained variance ratio')\n\n\n\n\n\nPlot the PCs’ correlations with indicator vector (GTEx or single cell data).\n\n\nShow the code\nlabel_vector = np.array([0]*(len(ppc)-2) + [1]*(len(ppc)- 17382))\n\ncorr = []\nfor i in range(len(ppc[0])):\n    correlation = abs(np.corrcoef(label_vector, ppc[:,i])[1][0])\n    corr.append(correlation)\n\nplt.plot(np.arange(1, 231 , 1), corr[0:230], 'ro-', linewidth=2)\nplt.xlabel('PC_i')\nplt.ylabel('correlation')\nplt.title('correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\nText(0.5, 1.0, 'correlation with PCi and indicator vector(0/1: sc or GTEx)')\n\n\n\n\n\n\n\n2.1.1 Remove the some PCs iteratively and plot the PC_i vs. PC_i+1\nRemove 0 PCs\n\n\nShow the code\n# make the plot of PCA result\n\nfor j in range(10):\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16,8), sharex=True, sharey=True)\n\n    scatter_x = np.array(ppc[:,j])\n    scatter_y = np.array(ppc[:,j+1])\n    group = np.array(merged_i.Tissue.tolist())\n    cdict = {\"Kidney - Medulla\" : [89, 145, 203], \"ADPSBQ\":[255,102,0],\"ADPVSC\":[255,170,0],\"ADRNLG\":[51,221,51],\"ARTAORT\":[255,85,85],\"ARTCRN\":[255,170,153],\"ARTTBL\":[255,0,0],\"BLDDER\":[170,0,0],\"BRNAMY\":[238,238,0],\"BRNACC\":[238,238,0],\"BRNCDT\":[238,238,0],\"BRNCHB\":[238,238,0],\"BRNCHA\":[238,238,0],\"BRNCTXA\":[238,238,0],\"BRNCTXB\":[238,238,0],\"BRNHPP\":[238,238,0],\"BRNHPT\":[238,238,0],\"BRNNCC\":[238,238,0],\"BRNPTM\":[238,238,0],\"BRNSPC\":[238,238,0],\"BRNSNG\":[238,238,0],\"BREAST\":[51,204,204],\"LCL\":[204,102,255],\"FIBRBLS\":[170,238,255],\"CVXECT\":[255,204,204],\"CVSEND\":[204,170,221],\"CLNSGM\":[238,187,119],\"CLNTRN\":[204,153,85],\"EESPGEJ\":[139,115,85],\"ESPMCS\":[85,34,0],\"ESPMSL\":[187,153,136],\"FLLPNT\":[255,204,204],\"HRTAA\":[153,0,255],\"HRTLV\":[102,0,153],\"KDNCTX\":[34,255,221],\"LIVER\":[170,187,102],\"LUNG\":[153,255,0],\"SLVRYG\":[153,187,136],\"MSCLSK\":[170,170,255],\"NERVET\":[255,215,0],\"OVARY\":[255,170,255],\"PNCREAS\":[153, 85, 34],\"PTTARY\":[170,255,153],\"PRSTTE\":[221,221,221],\"SKINNS\":[0,0,255],\"SKINS\":[119,119,255],\"SNTTRM\":[85,85,34],\"SPLEEN\":[119,136,85],\"STMACH\":[255,221,153],\"TESTIS\":[170,170,170],\"THYROID\":[0,102,0],\"UTERUS\":[255,102,255],\"VAGINA\":[255,85,153],\"WHLBLD\":[255,0,187], \"macrophage\": [0,0,0], \"monocyte\":[0,0,0], \"endothelial cell of hepatic sinusoid\":[0,0,0], \"liver dendritic cell\":[0,0,0], \"nk cell\":[0,0,0], \"fibroblast\":[0,0,0], \"hepatocyte\":[0,0,0], \"intrahepatic cholangiocyte\":[0,0,0], \"t cell\":[0,0,0], \"neutrophil\":[0,0,0], \"plasma cell\":[0,0,0], \"erythrocyte\":[0,0,0], \"endothelial cell\":[0,0,0], \"liver\":[0, 0, 0]}\n\n\n    for g in np.unique(group):\n        if g != \"liver\":\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, s = 3, zorder = 0)\n        else:\n            ix = np.where(group == g)\n            ax[0].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n\n    # ax[0].legend()\n\n\n\n\n    for i in range(len(np.unique(group))):\n        \n        g = np.unique(group)[i]\n        if (g!= \"liver\") and (g!= \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array([220, 220, 220])/255.0, s = 3, zorder = 0)\n        elif(g == \"LIVER\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"&lt;\", s = 5, zorder = 1)\n        elif(g == \"liver\"):\n            ix = np.where(group == g)\n            ax[1].scatter(scatter_x[ix], scatter_y[ix], color = np.array(cdict[g])/255.0, marker = \"x\", s = 5, zorder = 1)\n\n    # ax[1].legend()\n\n    fig.supxlabel(\"PC{}\".format(j+1), fontsize = 'x-small')\n    fig.supylabel(\"PC{}\".format(j+2), fontsize = 'x-small')\n    # plt.legend(loc = 0, fontsize = 'xx-small')\n    fig.suptitle('PCA of GTEx(GTEx liver: green) + single cell liver(black)', fontsize=14)\n    \n\n    #plt.savefig(\"Figures/Umap/TS_Liver_normalized_cta_1.jpg\")\n    plt.tight_layout()\n    plt.show()"
  }
]